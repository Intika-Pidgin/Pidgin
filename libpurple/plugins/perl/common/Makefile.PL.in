use 5.006;
use ExtUtils::MakeMaker;
# See lib/ExtUtils/MakeMaker.pm for details of how to influence the contents
# of the Makefile that is written.
WriteMakefile(
    'NAME'              => 'Purple',
    'VERSION_FROM'      => '@srcdir@/Purple.pm', # finds $VERSION
    'PREREQ_PM'         => {}, # e.g., Module::Name => 1.1
    ($] >= 5.005 ? ## Add these new keywords supported since 5.005
      (ABSTRACT_FROM    => '@srcdir@/Purple.pm', # finds $ABSTRACT
       AUTHOR           => 'Purple <http://pidgin.im/>') : ()),
    'DEFINE'            => '@DEBUG_CFLAGS@',
    'INC'               => '-I. -I@srcdir@ -I@top_srcdir@ -I@top_srcdir@/libpurple @GLIB_CFLAGS@',
    'OBJECT'            => '$(O_FILES)', # link all the C files too
#    'OPTIMIZE'          => '-g', # For debugging
);

if (eval {require ExtUtils::Constant; 1}) {
	foreach (qw(PURPLE_DEBUG_ALL PURPLE_DEBUG_MISC PURPLE_DEBUG_INFO
	            PURPLE_DEBUG_WARNING PURPLE_DEBUG_ERROR PURPLE_DEBUG_FATAL)) {
		push @names, {name => $_, type => "IV", macro => 1};
	}

	ExtUtils::Constant::WriteConstants(
		NAME    => 'Purple::DebugLevel',
		NAMES   => \@names,
		C_FILE  => 'const-c.inc',
		XS_FILE => 'const-xs.inc'
	);
}
else {
	use File::Copy;
	use File::Spec;

	foreach my $file ('const-c.inc', 'const-xs.inc') {
		my $fallback = File::Spec->catfile('fallback', $file);
		copy ($fallback, $file) or die "Can't copy $fallback to $file: $!";
	}
}
