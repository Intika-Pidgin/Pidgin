/*
 * purple
 *
 * Purple is the legal property of its developers, whose names are too numerous
 * to list here.  Please refer to the COPYRIGHT file distributed with this
 * source distribution.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111-1301  USA
 */

#ifndef PURPLE_VERSION_H
#define PURPLE_VERSION_H

/**
 * SECTION:version
 * @section_id: libpurple-version
 * @short_description: <filename>version.h</filename>
 * @title: Purple Versioning
 */

/**
 * PURPLE_MAJOR_VERSION:
 *
 * The major version of the running libpurple.
 */
#define PURPLE_MAJOR_VERSION (@PURPLE_MAJOR_VERSION@)

/**
 * PURPLE_MINOR_VERSION:
 *
 * The minor version of the running libpurple.
 */
#define PURPLE_MINOR_VERSION (@PURPLE_MINOR_VERSION@)

/**
 * PURPLE_MICRO_VERSION:
 *
 * The micro version of the running libpurple.
 */
#define PURPLE_MICRO_VERSION (@PURPLE_MICRO_VERSION@)

/**
 * PURPLE_EXTRA_VERSION:
 *
 * The "extra" part of the version number if anything.  Typical values are
 * "devel", "beta1", "rc2", etc.
 */
#define PURPLE_EXTRA_VERSION ("@PURPLE_EXTRA_VERSION@")

/**
 * PURPLE_VERSION
 *
 * The entire version as a string.
 */
#define PURPLE_VERSION ("@PURPLE_VERSION@")

/**
 * PURPLE_VERSION_CHECK:
 * @major: The major version to check for.
 * @minor: The minor version to check for.
 * @micro: The micro version to check for.
 *
 * Checks the version of libpurple being compiled against.  See
 * #purple_version_check for a runtime check.
 *
 * Returns: %TRUE if the version of libpurple is the same or newer than the
 *          passed-in version.
 */
#define PURPLE_VERSION_CHECK(major, minor, micro) ((major) == PURPLE_MAJOR_VERSION && \
                                                   ((minor) < PURPLE_MINOR_VERSION || \
                                                    ((minor) == PURPLE_MINOR_VERSION && (micro) <= PURPLE_MICRO_VERSION)))

G_BEGIN_DECLS

/**
 * purple_version_check:
 * @required_major: the required major version.
 * @required_minor: the required minor version.
 * @required_micro: the required micro version.
 *
 * Checks that the libpurple version is compatible with the requested
 * version
 *
 * Returns: %NULL if the versions are compatible, or a string describing
 *          the version mismatch if not compatible.
 */
const char *purple_version_check(guint required_major, guint required_minor, guint required_micro);

/**
 * purple_major_version:
 *
 * The major version of the running libpurple.  Contrast with
 * #PURPLE_MAJOR_VERSION, which expands at compile time to the major version of
 * libpurple being compiled against.
 */
extern const guint purple_major_version;

/**
 * purple_minor_version:
 *
 * The minor version of the running libpurple.  Contrast with
 * #PURPLE_MINOR_VERSION, which expands at compile time to the minor version of
 * libpurple being compiled against.
 */
extern const guint purple_minor_version;

/**
 * purple_micro_version:
 *
 * The micro version of the running libpurple.  Contrast with
 * #PURPLE_MICRO_VERSION, which expands at compile time to the micro version of
 * libpurple being compiled against.
 */
extern const guint purple_micro_version;

G_END_DECLS

#endif /* PURPLE_VERSION_H */
