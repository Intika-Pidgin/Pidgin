<?xml version='1.0' encoding="ISO-8859-1"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
]>
<chapter id="chapter-plugin-i18n">
  <title>Third Party Plugin Translation</title>

  <sect2 id="plugin-i18n-introduction">
  <title>Introduction</title>

  <para>
  For the purpose of this document we're going to assume that your plugin:

  <itemizedlist>
    <listitem><para>
Is set up to use autotools.  It may be possible to add translation support
without autotools, but we have no idea how.  We may not want to know, either ;)
    </para></listitem>
    <listitem><para>
Has an autogen.sh.  You may have also called this bootstrap.sh or similar.
    </para></listitem>
    <listitem><para>
Resides in a source tree that has <literal>configure.ac</literal> and
<literal>Makefile.am</literal> in the top-level directory as well as a
<literal>src</literal> directory in which the plugin's source is located.  A
<literal>Makefile.am</literal> should also exist in the <literal>src</literal>
directory.
    </para></listitem>
  </itemizedlist>
  </para>
  </sect2>

  <sect2 id="plugin-i18n-steps">
  <title>Steps to follow</title>

  <para>
  For a plugin to have translation support there are a few steps that need to
  followed:

  <itemizedlist>
    <listitem><para>
In your autogen.sh, add the following after your other utility checks:
<programlisting>
(intltoolize --version) &lt; /dev/null &gt; /dev/null 2&gt;&amp;1 || {
    echo;
    echo "You must have intltool installed to compile &lt;YOUR PLUGIN NAME&gt;";
    echo;
    exit;
}
</programlisting>
Then before your call to aclocal add:
<programlisting>
intltoolize --force --copy
</programlisting>
    </para></listitem>
    <listitem><para>
Now edit configure.ac and add the following:
<programlisting>
AC_PROG_INTLTOOL

GETTEXT_PACKAGE=&lt;YOUR PLUGIN NAME&gt;
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, ["$GETTEXT_PACKAGE"], [Define the gettext package to be used])

ALL_LINGUAS=""
AM_GLIB_GNU_GETTEXT
</programlisting>
The position of these macros in the file don't really matter, but if you
have issues either play around with it or feel free to ask one of the Pidgin
developers.  Finally add 'po/Makefile.in' to you 'AC_OUTPUT' command.
    </para></listitem>
    <listitem><para>
Now create a directory named 'po'.
    </para></listitem>
    <listitem><para>
'cd' into the 'po' directory.
    </para></listitem>
    <listitem><para>
Create/edit the file 'POTFILE.in' in your favorite editor.  Each line
should be the name of a file that could or does have strings marked for
translating (we're getting to that step).  These file names should be
relative to the top directory of your plugin's source tree.
    </para></listitem>
    <listitem><para>
'cd' back to the top directory of your plugin's source tree.
    </para></listitem>
    <listitem><para>
Open 'Makefile.am' and add 'po' to your 'SUBDIRS' variable.
    </para></listitem>
    <listitem><para>
While still in the top directory of your plugin's source tree,  execute
'intltool-prepare'.  This will setup anything extra that intltool needs.
    </para></listitem>
    <listitem><para>
Fire off 'autogen.sh' and when it's completed, verify that you have a
'po/POTFILES' (notice the lack of a .in).  If you do, everything should be
set on the autotools side.
    </para></listitem>
    <listitem><para>
Take a break, stretch your legs, smoke a cigarette, whatever, because
we're done with the autotools part.
    </para></listitem>
    <listitem><para>
When you're ready, 'cd' into the directory with the source files for your
plugin.
    </para></listitem>
    <listitem><para>
Open the file containing the PurplePluginInfo structure.
    </para></listitem>
    <listitem><para>
If you're not already, please make sure that you are including the
'config.h' file for you plugin.  Note that 'config.h' could be whatever
you told autohead to use with AM_CONFIG_HEADER.  Also add the following:
<programlisting>
#include &lt;glib/gi18n-lib.h&gt;
</programlisting>
Make sure that this include is after you include of your 'config.h',
otherwise you will break your build.  Also note that if you wish to
maintain compatibility with older versions of GLib, you will need to
include additional preprocessor directives, which we won't cover here.
    </para></listitem>
    <listitem><para>
This is where things get a bit goofy.  libpurple is going to try to
translate our strings using the libpurple gettext package.  So we have to
convert them before libpurple attempts to.
    </para></listitem>
    <listitem><para>
To do this, we're going to change the entries for name, summary, and
description to NULL.
    </para></listitem>
    <listitem><para>
Next, locate your 'init_plugin' function.  Your name for this function
may vary, but it's the second parameter to 'PURPLE_INIT_PLUGIN'.
    </para></listitem>
    <listitem><para>
Now add the following within your 'init_plugin' function:
<programlisting>
#ifdef ENABLE_NLS
	bindtextdomain(GETTEXT_PACKAGE, PURPLE_LOCALEDIR);
	bind_textdomain_codeset(GETTEXT_PACKAGE, "UTF-8");
#endif /* ENABLE_NLS */

	info.name        = _("&lt;YOUR PLUGIN NAME&gt;");
	info.summary     = _("&lt;YOUR PLUGIN SUMMARY&gt;");
	info.description = _("&lt;YOUR PLUGIN DESCRIPTION&gt;");
</programlisting>
Note that the _() is intentional, and that it is telling intltool that
this string should be translated.  There is also N_() which says that a
string should only be marked for translation but should not be translated
yet.
    </para></listitem>
    <listitem><para>
Go through the rest of your code and mark all the other strings for
translation with _().
    </para></listitem>
    <listitem><para>
When thats done, feel free to commit your work, create your po template
(pot file) or whatever.
    </para></listitem>
    <listitem><para>
To create you po template, 'cd' to 'po' and execute:
<programlisting>
intltool-update --pot
</programlisting>
    </para></listitem>
    <listitem><para>
To add new translations to your plugin, all you have to do is add the
language code to the 'ALL_LINGUAS' variable in your configure.ac.  Take
note that this list of languages should be separated by a space.  After
you have added the language code to 'ALL_LINGUAS', drop the xx.po file
into 'po', and re-'autogen.sh'.  After a full build you should now be
able to use the translation.
    </para></listitem>
  </itemizedlist>
  </para>
 </sect2>
</chapter>
